{"version":3,"sources":["views/app-view.js"],"names":["TodoView","Backbone","View","extend","tagName","keypress .searchIpt","events","initialize","this","$el","$","fooList","searchBtnStatus","render","foodLists","each","food","console","log","view","el","edit","close","search","createOnEnter","e","self","input","val","which","ENTER_KEY","html","spinner","spin","loadTarget","ajax","nutUrl","done","result","reset","meta","Object","prototype","toString","call","indexOf","hits","myTodos","i","myTodo","Todo","title","fields","brandName","calories","get","set","push","_meta","alert","respond"],"mappings":"YAAA,IAAIA,UAAWC,SAASC,KAAKC,QAA7BC,QAAIJ,QAEFI,QAGEC,sBAAuB,gBADzBC,mBAAQ,UAMRC,WAAY,WADZC,KAAAC,IAAAC,EAAA,SACAH,KAAAA,QAAYG,EAAA,YACVF,KAAKC,MAAQD,KAAAE,EAAF,cACXF,KAAKG,iBAAY,EAEjBH,KAAKI,SAAAA,UAAkB,gBAAvBJ,KAAAK,SAOFA,OAAQ,WAQN,MALAC,WAAUC,KAAK,SAASC,GADxBC,QAAAC,IAAAF,EACAF,IAAAA,GAAUC,GAAKf,WAASgB,MAAMA,GAC5BC,MAAAA,QAAYD,OAAZG,EAAAN,SAAAO,KACAZ,MAGFA,MAGDa,KAhCiC,aAoCjCC,MApCiC,aAwCjCC,OAxCiC,WA2ChCf,KAAKI,iBAAkB,EADzBW,KAAAA,iBAGCC,cA7CiC,SAAAC,GAgDhC,GAAIC,GAAOlB,KADdgB,EAAAA,EAAeG,MAAAC,MACRF,EAAO,2CAAXV,EAAA,gIAK2B,IAAzBU,EAAKd,iBAA4Ba,EAAEI,QAAUC,aAApB,IAAzBJ,EAAKd,kBACLc,EAAIA,iBAAA,GAGJlB,KAAAG,QAAAoB,KAAA,IAEAC,QAAAC,KAAAC,YACAF,EAAAA,MACEG,IAAKC,IAAPC,KAGCA,SAAKC,GAOJ,GALAxB,UAAUyB,QAEVzB,UAAU0B,MAAK,GAEfR,QAAQC,QAC0D,IAA9DQ,OAAOC,UAAUC,SAASC,KAAKN,GAAQO,QAAQ,WACjD,GAAIP,EAAOQ,KAAM,CAEjB,IAAA,GADMC,MACDC,EAAIA,EAATA,EAAgBA,EAAIV,KAAOQ,OAA3BE,IAAA,CAEE,GAAAC,GAAIA,GAASC,OACXC,MAAAA,EAAOb,KAAOQ,GAAPM,OAAeA,UACtBC,UAAAA,EAAWf,KAAOQ,GAAPM,OAAeA,WAC1BE,SAAAA,EAAUhB,KAAOQ,GAAPM,OAAeA,aAGvB,UAAJH,EAAIA,IAAOM,cACTN,EAAAA,IAAOO,YAAP,IAEFT,EAAAA,KAAQU,GAGV3C,UAAAA,KAAU2C,GACV3C,UAAAA,MAAU0B,GACVvB,QAAAA,IAAQC,WACRD,QAAAA,IAAQC,UAAIJ,MAAU4C,gBAGtBC,OAAM,qBAIRA,KAAAA,SAAAC,GArCFD,MAAA","file":"app-view.js","sourcesContent":["var TodoView = Backbone.View.extend({\r\n\r\n  tagName: '#todo',\r\n\r\n  events: {\r\n    'keypress .searchIpt': 'createOnEnter',\r\n    'click .searchBtn': 'search'\r\n  },\r\n\r\n  // Called when the view is first created\r\n  initialize: function() {\r\n    this.$el = $('#todo');\r\n    this.fooList = $('#fooList');\r\n    this.input = this.$('.searchIpt');\r\n    this.searchBtnStatus = false;\r\n    // 监听collections有改变就render\r\n    this.listenTo(foodLists, 'change: _meta', this.render);\r\n    // this.listenTo(foodLists, 'change', this.render);\r\n  },\r\n\r\n  // Re-render the titles of the todo item.\r\n  render: function() {\r\n\r\n    // 刷新食物列表\r\n    foodLists.each(function(food) {\r\n      console.log(food);\r\n      var view = new TodoView({model: food});\r\n      this.fooList.append(view.render().el);\r\n    }, this);\r\n    // var foodTemplate = _.template( $('#food-template').html(), {foodLists: foodLists.models});\r\n    // this.fooList.html(foodTemplate);\r\n    return this;\r\n  },\r\n\r\n  edit: function() {\r\n    // executed when todo label is double clicked\r\n  },\r\n\r\n  close: function() {\r\n    // executed when todo loses focus\r\n  },\r\n\r\n  search: function() {\r\n    this.searchBtnStatus = true;\r\n    this.createOnEnter();\r\n  },\r\n\r\n\tcreateOnEnter: function(e) {\r\n    var self = this;\r\n    var food = self.input.val();\r\n    var nutUrl = 'https://api.nutritionix.com/v1_1/search/' + food +'?fields=item_name%2Citem_id%2Cbrand_name%2Cnf_calories%2Cnf_total_fat'\r\n     + '&appId=fafaa50d&appKey=dd6e5d7563cfb23e902d053eca5c80a4';\r\n\r\n\t\tif (self.searchBtnStatus === true || e.which === ENTER_KEY) {\r\n      if (self.searchBtnStatus === true) {\r\n        self.searchBtnStatus = false;\r\n      }\r\n      // 清除原来内容\r\n      this.fooList.html('');\r\n      // 显示加载中显示器\r\n      spinner.spin(loadTarget);\r\n      $.ajax({\r\n        url: nutUrl,\r\n      })\r\n      .done(function(result) {\r\n        // 清除collections内容\r\n        foodLists.reset();\r\n        // 重设加载状态\r\n        foodLists.meta(false);\r\n        // 成功响应后，关闭加载显示器\r\n        spinner.spin();\r\n        if (Object.prototype.toString.call(result).indexOf('Object') !== -1) {\r\n          if (result.hits) {\r\n            var myTodos = [];\r\n          for (var i = 0; i < result.hits.length; i++) {\r\n            // new 一个 model\r\n            var myTodo = new Todo({\r\n              title: result.hits[i].fields.item_name,\r\n              brandName: result.hits[i].fields.brand_name,\r\n              calories: result.hits[i].fields.nf_calories\r\n            });\r\n            // 如果是USDA的不用显示USDA name\r\n            if (myTodo.get('brandName') === 'USDA') {\r\n              myTodo.set('brandName', '');\r\n            }\r\n            myTodos.push(myTodo);\r\n          }\r\n          // 添加到collections中\r\n          foodLists.push(myTodos);\r\n          foodLists.meta(true);\r\n          console.log(foodLists);\r\n          console.log(foodLists._meta.completed);\r\n          }\r\n        } else {\r\n          alert('响应的结果数据类型不是一个对象');\r\n        }\r\n      })\r\n      .fail(function(respond) {\r\n        alert('响应失败')\r\n      });\r\n\t\t}\r\n\t}\r\n});\r\n"]}